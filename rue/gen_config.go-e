// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package rue

import (
	"math/big"

	"github.com/Rue-Foundation/go-rue/common"
	"github.com/Rue-Foundation/go-rue/common/hexutil"
	"github.com/Rue-Foundation/go-rue/consensus/ruehash"
	"github.com/Rue-Foundation/go-rue/core"
	"github.com/Rue-Foundation/go-rue/rue/downloader"
	"github.com/Rue-Foundation/go-rue/rue/gasprice"
)

func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               uint64
		SyncMode                downloader.SyncMode
		LightServ               int  `toml:",omitempty"`
		LightPeers              int  `toml:",omitempty"`
		MaxPeers                int  `toml:"-"`
		SkipBcVersionCheck      bool `toml:"-"`
		DatabaseHandles         int  `toml:"-"`
		DatabaseCache           int
		Ruebase               common.Address `toml:",omitempty"`
		MinerThreads            int            `toml:",omitempty"`
		ExtraData               hexutil.Bytes  `toml:",omitempty"`
		GasPrice                *big.Int
		RuehashCacheDir          string
		RuehashCachesInMem       int
		RuehashCachesOnDisk      int
		RuehashDatasetDir        string
		RuehashDatasetsInMem     int
		RuehashDatasetsOnDisk    int
		TxPool                  core.TxPoolConfig
		GPO                     gasprice.Config
		EnablePreimageRecording bool
		DocRoot                 string      `toml:"-"`
		PowMode                 ruehash.Mode `toml:"-"`
	}
	var enc Config
	enc.Genesis = c.Genesis
	enc.NetworkId = c.NetworkId
	enc.SyncMode = c.SyncMode
	enc.LightServ = c.LightServ
	enc.LightPeers = c.LightPeers
	enc.SkipBcVersionCheck = c.SkipBcVersionCheck
	enc.DatabaseHandles = c.DatabaseHandles
	enc.DatabaseCache = c.DatabaseCache
	enc.Ruebase = c.Ruebase
	enc.MinerThreads = c.MinerThreads
	enc.ExtraData = c.ExtraData
	enc.GasPrice = c.GasPrice
	enc.RuehashCacheDir = c.Ruehash.CacheDir
	enc.RuehashCachesInMem = c.Ruehash.CachesInMem
	enc.RuehashCachesOnDisk = c.Ruehash.CachesOnDisk
	enc.RuehashDatasetDir = c.Ruehash.DatasetDir
	enc.RuehashDatasetsInMem = c.Ruehash.DatasetsInMem
	enc.RuehashDatasetsOnDisk = c.Ruehash.DatasetsOnDisk
	enc.TxPool = c.TxPool
	enc.GPO = c.GPO
	enc.EnablePreimageRecording = c.EnablePreimageRecording
	enc.DocRoot = c.DocRoot
	enc.PowMode = c.Ruehash.PowMode
	return &enc, nil
}

func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               *uint64
		SyncMode                *downloader.SyncMode
		LightServ               *int  `toml:",omitempty"`
		LightPeers              *int  `toml:",omitempty"`
		MaxPeers                *int  `toml:"-"`
		SkipBcVersionCheck      *bool `toml:"-"`
		DatabaseHandles         *int  `toml:"-"`
		DatabaseCache           *int
		Ruebase               *common.Address `toml:",omitempty"`
		MinerThreads            *int            `toml:",omitempty"`
		ExtraData               hexutil.Bytes   `toml:",omitempty"`
		GasPrice                *big.Int
		RuehashCacheDir          *string
		RuehashCachesInMem       *int
		RuehashCachesOnDisk      *int
		RuehashDatasetDir        *string
		RuehashDatasetsInMem     *int
		RuehashDatasetsOnDisk    *int
		TxPool                  *core.TxPoolConfig
		GPO                     *gasprice.Config
		EnablePreimageRecording *bool
		DocRoot                 *string      `toml:"-"`
		PowMode                 *ruehash.Mode `toml:"-"`
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Genesis != nil {
		c.Genesis = dec.Genesis
	}
	if dec.NetworkId != nil {
		c.NetworkId = *dec.NetworkId
	}
	if dec.SyncMode != nil {
		c.SyncMode = *dec.SyncMode
	}
	if dec.LightServ != nil {
		c.LightServ = *dec.LightServ
	}
	if dec.LightPeers != nil {
		c.LightPeers = *dec.LightPeers
	}
	if dec.SkipBcVersionCheck != nil {
		c.SkipBcVersionCheck = *dec.SkipBcVersionCheck
	}
	if dec.DatabaseHandles != nil {
		c.DatabaseHandles = *dec.DatabaseHandles
	}
	if dec.DatabaseCache != nil {
		c.DatabaseCache = *dec.DatabaseCache
	}
	if dec.Ruebase != nil {
		c.Ruebase = *dec.Ruebase
	}
	if dec.MinerThreads != nil {
		c.MinerThreads = *dec.MinerThreads
	}
	if dec.ExtraData != nil {
		c.ExtraData = dec.ExtraData
	}
	if dec.GasPrice != nil {
		c.GasPrice = dec.GasPrice
	}
	if dec.RuehashCacheDir != nil {
		c.Ruehash.CacheDir = *dec.RuehashCacheDir
	}
	if dec.RuehashCachesInMem != nil {
		c.Ruehash.CachesInMem = *dec.RuehashCachesInMem
	}
	if dec.RuehashCachesOnDisk != nil {
		c.Ruehash.CachesOnDisk = *dec.RuehashCachesOnDisk
	}
	if dec.RuehashDatasetDir != nil {
		c.Ruehash.DatasetDir = *dec.RuehashDatasetDir
	}
	if dec.RuehashDatasetsInMem != nil {
		c.Ruehash.DatasetsInMem = *dec.RuehashDatasetsInMem
	}
	if dec.RuehashDatasetsOnDisk != nil {
		c.Ruehash.DatasetsOnDisk = *dec.RuehashDatasetsOnDisk
	}
	if dec.TxPool != nil {
		c.TxPool = *dec.TxPool
	}
	if dec.GPO != nil {
		c.GPO = *dec.GPO
	}
	if dec.EnablePreimageRecording != nil {
		c.EnablePreimageRecording = *dec.EnablePreimageRecording
	}
	if dec.DocRoot != nil {
		c.DocRoot = *dec.DocRoot
	}
	if dec.PowMode != nil {
		c.Ruehash.PowMode = *dec.PowMode
	}
	return nil
}
